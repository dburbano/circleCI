# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.23.0"

default_platform :ios

platform :ios do
  before_all do
   ENV["SLACK_URL"] ||= "https://hooks.slack.com/services/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"
   ENV["MATCH_PASSWORD"] = "sismo2017"
   xcversion(version: "9.4.1")
  end

  desc "Running Pods" 
  lane :pods do
    cocoapods
  end

  desc "Runs all the tests"
  lane :test do
    clear_derived_data
    scan(
      scheme: "machApp-dev",
      output_types: "html, junit",
      clean: true
    )
  end

lane :pipeline_step_1 do
  ensure_git_status_clean
  bumpAndTagRelease
  build_dev
end

desc "This lane will replace pipeline_step_1 for organization"
lane :build_develop do
  ensure_git_status_clean
  bumpAndTagRelease
  build_dev
end


lane :pipeline_step_2 do
  build_qa
  upload_to_hockeyapp_qa
end

 desc "bulding_development" 
 lane :build_dev do
    gym(scheme: "machApp-dev", clean: true, export_method: "development", output_name: "machApp-dev", output_directory: "./build/dev", verbose: "true",
    export_options: {
      'signingStyle' => 'manual',
      provisioningProfiles: {"cl.sismo.mach.dev" => "match Development cl.sismo.mach.dev"},
      uploadBitcode: false,
      uploadSymbols: false,
      compileBitcode: false,
    })
  end

  desc "Building for QA"
  lane :build_qa do
    gym(scheme: "machApp-staging", clean: "true", export_method: "ad-hoc", output_directory: "./build/staging", output_name: "machApp-staging", verbose: "true",          export_options: {
      'signingStyle' => 'manual',
      provisioningProfiles:  {"cl.sismo.mach.staging" => "match AdHoc cl.sismo.mach.staging"},
      uploadBitcode: false,
      uploadSymbols: false,
      compileBitcode: false,
    })
  end

  desc "Build Automation"
  lane :build_automation do
    gym(scheme: "machApp-automation", clean: true, export_method: "ad-hoc", output_name: "machApp-automation", output_directory: "./build/automation", verbose: "true", export_options: {
      'signingStyle' => 'manual',
      provisioningProfiles:  {"cl.sismo.mach.automation" => "match AdHoc cl.sismo.mach.automation"},
      uploadBitcode: false,
      uploadSymbols: false,
      compileBitcode: false,
    })
  end

 desc "Running Lint Tool"
 lane :linter_validation do
  swiftlint(
    mode: :lint, # SwiftLint mode: :lint (default) or :autocorrect
    output_file: "fastlane/reports/lint_report.junit", # The path of the output file (optional),
    ignore_exit_status: false,
    config_file: "./.swiftlint.yml",   # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
    reporter: "junit"
  )
 end

  desc "Running Lint Autocorrect"
  lane :linter_autocorrect do
   swiftlint(
    mode: :autocorrect, # SwiftLint mode: :lint (default) or :autocorrect
    ignore_exit_status: false,    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
  )
 end

 lane :code_coverage do |options|
  xcov(
    workspace: "machApp.xcworkspace",
    scheme: "machApp-dev",
    output_directory: "fastlane/reports",
    configuration: "debug",
    minimum_coverage_percentage: options[:percentage],
    only_project_targets: true
  )
 end

 desc "Running Match for development"
  lane :match_development do
    setup_circle_ci
    match(type: "development", app_identifier: "cl.sismo.mach.dev", force_for_new_devices: true, readonly: true)
  end

  desc "Running Match for development"
  lane :match_development_create do
    register_devices(devices_file: "./fastlane/devices.txt")
    match(type: "development", app_identifier: "cl.sismo.mach.dev", force_for_new_devices: true)
  end

  desc "Running Match for staging"
  lane :match_adhoc do
    setup_circle_ci
    match(type: "adhoc", app_identifier: "cl.sismo.mach.staging", force_for_new_devices: true, readonly: true)
  end

  desc "Running Match for automation"
  lane :match_automation do
    setup_circle_ci
    match(type: "adhoc", app_identifier: "cl.sismo.mach.automation", force_for_new_devices: true, readonly: true)
  end

  desc "Running Match for automation"
  lane :match_automation_create do
    register_devices(devices_file: "./fastlane/devices.txt")
    match(type: "adhoc", app_identifier: "cl.sismo.mach.automation", force_for_new_devices: true)
  end

  desc "Running Match for staging"
  lane :match_adhoc_create do
    register_devices(devices_file: "./fastlane/devices.txt")
    match(type: "adhoc", app_identifier: "cl.sismo.mach.staging", force_for_new_devices: true)
  end

  desc "Running all Match"
  lane :match_all do
   # register_devices(devices_file: "./fastlane/devices.txt")
    match_development
    match_adhoc
    match_automation
  end

  desc "Running all Match creating new profile"
  lane :match_all_create do 
    match_development_create
    match_adhoc_create
    match_automation_create
  end

  def version_string
    "#{get_version_number}-(#{get_build_number})"
  end

  desc "Version Bumping!"
  lane :bumpAndTagRelease do 
    increment_build_number
    version_number = version_string
    commit_version_bump(message: "Version bump to #{version_number} - [skip ci]", xcodeproj: "machApp.xcodeproj") 
    add_git_tag(tag: "#{version_number}")
    push_to_git_remote
    push_git_tags
  end

  desc "Incrementing Build"
  lane :increment_build do
    increment_build_number
  end

desc "Uploading to Hockey App for QA"
  lane :upload_to_hockeyapp_qa do |options|
   #changelog = changelog_from_git_commits(between: ["#{get_version_number}","HEAD"], pretty: "- (%ae) %s")
    version_number = version_string
    hockey(api_token: "34ff01fba4194e90bc50c2d139f1c98c",
    create_update: true,
    bundle_version: "#{get_build_number}",
    bundle_short_version: "#{get_version_number}",
    ipa: options[:path],
    notes: "New Build",
    public_identifier: "2fd8f6f875fd4119955b4b886c7c32bc", mandatory: "1", notify: "0")
    slack(message: "New build version available: #{version_number}",
    channel: "qa-notifications")
    notification(title: "Attention!!!!!!!!!!!", message: "Don't forget to update pivotal", sound:"Basso")
  end

desc "Uploading to Hockey App for DEV"
  lane :upload_to_hockeyapp_dev do |options|
    #changelog = changelog_from_git_commits(between: ["#{get_version_number}","HEAD"], pretty: "- (%ae) %s")
    version_number = version_string
    hockey(
    api_token: "a689469027be44c380f82f373f3251b4",
    create_update: true,
    bundle_version: "#{get_build_number}",
    bundle_short_version: "#{get_version_number}",
    public_identifier: "f81aa95b361a46df969926fc41bf5a93", mandatory: "0", notify: "0",
    ipa: options[:path],
    notes: "New Build"
  )
  end

  desc "Uploading to Hockey App for Automation"
  lane :upload_to_hockeyapp_automation do |options|
    version_number = version_string
    hockey(
    api_token: "50f3659da8414e9d85f46ebbce37d35d",
    create_update: true,
    bundle_version: "#{get_build_number}",
    bundle_short_version: "#{get_version_number}",
    public_identifier: "107b7ef5f5074d9a889afb4d832d1ae1", mandatory: "1", notify: "1",
    ipa: options[:path],
    notes: "New Build"
  )
  end

desc "Lane used in OPS environment which build an IPA for OPS dev"
lane :build_ops_develop do
  ensure_git_status_clean
  build_dev
end
  
desc "Lane used in OPS environment which deploys DEV to HockeyApp"
  lane :upload_to_hockeyapp_ops_dev do
    hockey(
    api_token: "25ab1daf6d3341e6b7b12b9de0f36b67",
    ipa: "./build/dev/machApp-dev.ipa",
	notes: "New OPS Develop Build",
	notes_type: "1"
  )
  end

desc "Lane used in OPS environment which build an IPA for OPS staging"
lane :build_ops_qa do
  ensure_git_status_clean
  build_qa
end

desc "Lane used in OPS environment which deploys STAGING to HockeyApp"
  lane :upload_to_hockeyapp_ops_qa do
    hockey(
    api_token: "5837c8d18eeb41bbbd65f57570b0f6ee",
    ipa: "./build/staging/machApp-staging.ipa",
    notes: "New OPS Staging Build",
	notes_type: "1"
  )
  end   

desc "Lane used in OPS environment which build an IPA for OPS Automation"
lane :build_ops_automation do
  ensure_git_status_clean
  build_automation
end

desc "Lane used in OPS environment which deploys AUTOMATION to HockeyApp"
  lane :upload_to_hockeyapp_ops_automation do
    hockey(
    api_token: "768a2bd752bf4ae7b48f6ece8f611b4d",
    ipa: "./build/automation/machApp-automation.ipa",
    notes: "New OPS Automation Build",
	notes_type: "1"
  )
  end    

  desc "Deploy a new version to the App Store"
  lane :release do
    # match_appstore
    # snapshot
    gym # Build your app - more options available
    deliver(force: true)
    # frameit
  end

desc "Lane used to inform in slack that there is a pending approval for production environment"
lane :slack_prod_pending_approval do
	version_number = version_string
	slack(message: "New pending pipeline approval for iOS PRODUCTION environment: #{version_number}",
    channel: "#ios")
end

desc "Lane used to inform in slack that there is a pending approval for OPS environment"
lane :slack_ops_pending_approval do
	version_number = version_string
	slack(message: "New pending pipeline approval for iOS OPS environment: #{version_number}",
    channel: "@dburbano")
end
  
  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
    clean_build_artifacts
    if (lane != "linter_validation")
      reset_git_repo(force: true)
    end
  end

end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
